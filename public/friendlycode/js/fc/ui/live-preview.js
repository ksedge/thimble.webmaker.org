// Displays the HTML source of a CodeMirror editor as a rendered preview
// in an iframe.
define(["jquery", "backbone-events"], function($, BackboneEvents) {
  "use strict";

  var Preferences = require("fc/prefs"),
      showMappings = true,
      updateFrame = function(bool) {};

  function LivePreview(options) {
    var self = {codeMirror: options.codeMirror, title: ""},
        iframe = document.createElement("iframe"),
        previewLoader = options.previewLoader || "/templates/previewloader.html",
        previewArea = options.previewArea,
        codeMirror = options.codeMirror,
        telegraph,        // communication channel to the preview iframe
        knownDoc,         // the latest known document generated by slowparse
        findElementRoute; // route finder in the knownDoc

    // event listening for proxied event messages from our preview iframe.
    function listenForEvents() {
      window.addEventListener("message", function(evt) {
        var message = JSON.parse(evt.data);
        if (typeof message.type !== "string" || message.type.indexOf("previewloader") === -1) {
          return;
        }
        // Reactions to postmessages from the preview iframe go here
      });
    }

    // Always populate the iframe immediately with the document from
    // brackets
    iframe.onload = function() {
      // TODO: Populate with initial document from brackets
    };

    // then set up the preview load from URL
    iframe.src = previewLoader;

    // set up the code-change handling.
    codeMirror.on("reparse", function(event) {
      if (!event.error || options.ignoreErrors) {
        // add the preview iframe to the editor on the first
        // attempt to parse the Code Mirror text.
        if(!iframe.contentWindow) {
          document.querySelector(".reload-button").onclick = function() {
            codeMirror.reparse();
          };
          previewArea.append(iframe);
          telegraph = iframe.contentWindow;
          listenForEvents();
        }

        // Communicate content changes. For the moment,
        // we treat all changes as a full refresh.
        var message = {
          type: "overwrite",
          runjs: document.getElementById('preview-run-js').checked,
          sourceCode: event.sourceCode,
          showMappings: showMappings
        };

        // record current doc
        knownDoc = event.document;

        updateFrame = function(bool) {
          message.showMappings = bool;
          try {
            // targetOrigin is current a blanket allow, we'll want to
            // narrow it down once scripts in Thimble are operational.
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=891521
            telegraph.postMessage(JSON.stringify(message), "*");
          } catch (e) {
            console.log("An error occurred while postMessaging data to the preview pane");
            throw e;
          }
        };

        updateFrame(showMappings);
      }
    });

    var setViewLink = self.setViewLink = function(link) {
      self.trigger("change:viewlink", link);
    };

    BackboneEvents.mixin(self);
    return self;
  }

  return LivePreview;
});
